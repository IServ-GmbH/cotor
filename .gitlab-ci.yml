include:
  - project: 'iserv-internal/git/ci'
    file: '/iserv-app.yml'

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      variables:
        CI_ISERV_PACKAGE_UPLOAD: "false"
    - !reference [.workflow, rules]

variables:
  CI_ISERV_TRANSLATIONS_ENABLE: "false"
  CI_ISERV_WEB_ROOT: './'

stages:
  - prepare
  - extract
  - update
  - fetch
  - prebuild
  - build
  - compile
  - check
  - package
  - test
  - lint
  - upload
  - release
  - distribute
  - distribute-ci

composer:
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
      when: always
    - !reference [.composer, rules]

composer dev:
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
      when: always
    - !reference [.composer, rules]

phpstan:
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
      when: always
    - !reference [.phpstan, rules]

psalm:
  rules:
    - if: ($CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID || ($CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//))
      when: always

php-cs-fixer:
  rules:
    - if: ($CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID || ($CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//))
      when: always

Phar:
  stage: build
  image: !reference [.PHP Image, image]
  before_script:
    - env
    - git utimes
    - cd "${CI_ISERV_WEB_ROOT:-.}"
  script:
    - iservmake phar
  needs:
    - composer
  artifacts:
    paths:
      - cotor
      - cotor.phar
    expire_in: 1 week
  rules:
    - if: $RENOVE_ENABLE == "true"
      when: never
    - if: ($CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID || ($CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//))
      when: always
  tags:
   - docker

Phar Upload:
  stage: upload
  image: curlimages/curl:latest
  before_script:
    - env
    - cd "${CI_ISERV_WEB_ROOT:-.}"
  script:
    - 'curl -f --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file cotor.phar "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/cotor.phar"'
  needs:
    - Phar
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
  tags:
   - docker

Prepare Release:
  stage: build
  image: $CI_REGISTRY/iserv/internal-dev/slim:master
  before_script:
    - env
    - cd "${CI_ISERV_WEB_ROOT:-.}"
  script:
    - echo "RELEASE_DESCRIPTION=$(echo "$CI_COMMIT_TAG_MESSAGE" | sed "/-----BEGIN PGP SIGNATURE-----/,/-----END PGP SIGNATURE-----/d")" | sed ':a;N;\$\!ba;s/\n/<br>/g' >> variables.env
  needs: []
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
  tags:
   - docker

Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - env
    - cd "${CI_ISERV_WEB_ROOT:-.}"
  script:
    - echo "Running release job"
  needs:
    - Phar Upload
    - job: Prepare Release
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^iserv\//
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$RELEASE_DESCRIPTION'
    assets:
      links:
        - name: "cotor.phar"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${CI_PROJECT_NAME}/${CI_COMMIT_TAG}/cotor.phar"
  tags:
   - docker

Package:
  needs:
    - !reference [.Package, needs]
    - Phar
